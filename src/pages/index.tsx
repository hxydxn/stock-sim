import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";

import { Button } from "~/ui/button";

import { api } from "~/utils/api";
import { Input } from "~/ui/input";
import { useZodForm } from "~/utils/zod-form";
import { z } from "zod";
import { TransactionCategory } from "@prisma/client";
import { transactionCreateSchema, transactionPutSchema } from "./portfolio";

// import PolygonAdapter from "@polygon.io/tradingview-adapter";
import TradingView from "lightweight-charts";
import {
    CartesianGrid,
    Line,
    LineChart,
    ResponsiveContainer,
    Tooltip,
    XAxis,
    YAxis,
} from "recharts";
import { useEffect, useRef, useState } from "react";

import { AdvancedRealTimeChart } from "react-ts-tradingview-widgets";
import { Label } from "~/ui/label";
import { Controller } from "react-hook-form";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "~/ui/select";

const Home: NextPage = () => {
    const [int, setInt] = useState("1");
    const { data: session } = useSession();
    const hello = api.hello.useQuery({ text: session?.user.name });

    return (
        <>
            <Head>
                <title>Stonk Sim</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <nav className="container mx-auto flex flex-wrap items-center justify-between p-4">
                <Link href="/" className="flex items-center">
                    <Image
                        src="https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/1f680.svg"
                        alt="Rocket logo"
                        width={32}
                        height={32}
                    ></Image>
                </Link>
                <div className="flex items-center space-x-4">
                    <p>
                        {hello.data
                            ? hello.data.greeting
                            : "Loading tRPC query..."}
                    </p>
                    <AuthShowcase />
                    <PortfolioButton />
                </div>
            </nav>
            <main className="flex flex-col items-center justify-center">
                <h1 className="py-12 text-5xl font-extrabold tracking-tight sm:text-[5rem]">
                    <span className="text-purple-400">To The Moon!</span>
                </h1>
                <div className="space-y-1 p-4 text-center">
                    <div className="flex flex-row space-x-4">
                        <Button onClick={(_) => setInt("1")}>1 minute</Button>
                        <Button onClick={(_) => setInt("30")}>
                            30 minutes
                        </Button>
                        <Button onClick={(_) => setInt("D")}>1 day</Button>
                    </div>
                </div>
                <div className="container h-96">
                    <AdvancedRealTimeChart
                        theme="dark"
                        autosize={true}
                        interval={int}
                        withdateranges={false}
                        symbol="GME"
                        enable_publishing={false}
                        hide_top_toolbar={true}
                        save_image={false}
                        hide_legend={true}
                        hide_side_toolbar={true}
                        details={false}
                    ></AdvancedRealTimeChart>
                </div>
                <div className="center  p-12">
                    <div className="flex max-w-md flex-col">
                        <TransactButton />
                    </div>
                </div>
            </main>
        </>
    );
};

export default Home;

const PortfolioButton: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div className={sessionData ? "" : "hidden"}>
            <Link href="/portfolio">
                <Button variant="destructive">Portfolio</Button>
            </Link>
        </div>
    );
};

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <Button
                variant="ghost"
                onClick={sessionData ? () => signOut() : () => signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </Button>
        </div>
    );
};

const TransactButton: React.FC = () => {
    const methods = useZodForm({
        schema: transactionPutSchema,
    });
    const { data: session } = useSession();
    const utils = api.useContext();
    const createTransaction = api.transaction.create.useMutation({
        onSettled: async () => {
            await utils.transaction.invalidate();
            methods.reset();
        },
    });

    const onSubmit = methods.handleSubmit(
        (data) => {
            createTransaction.mutate(data);
        },
        (e) => {
            console.log("Whoops... something went wrong!");
            console.error(e);
        },
    );

    return (
        <div className={"container max-w-xs items-center"}>
            <form action="" className="flex flex-col gap-4" onSubmit={onSubmit}>
                <div className="space-y-1">
                    <Label htmlFor="name">Stock Ticker</Label>
                    <Input
                        id="stock"
                        className="bg-slate-800"
                        value={"GME"}
                        {...methods.register("stock")}
                    />
                    <p className="font-medium text-red-500">
                        {methods.formState.errors?.stock?.message}
                    </p>
                </div>

                <div className="space-y-1">
                    <Label htmlFor="name">Amount (# of Shares)</Label>
                    <Input
                        id="amount"
                        className="bg-slate-800"
                        {...methods.register("amount", { valueAsNumber: true })}
                    />
                    <p className="font-medium text-red-500">
                        {methods.formState.errors?.amount?.message}
                    </p>
                </div>

                <div className="space-y-1">
                    <Label htmlFor="category">Category</Label>
                    <Controller
                        control={methods.control}
                        name="type"
                        render={({ field }) => (
                            <Select
                                value={field.value}
                                onValueChange={field.onChange}
                            >
                                <SelectTrigger className="bg-slate-800">
                                    <SelectValue placeholder="Type of Transaction" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="BUY">Buy</SelectItem>
                                    <SelectItem value="SELL">Sell</SelectItem>
                                </SelectContent>
                            </Select>
                        )}
                    />
                    <p className="font-medium text-red-500">
                        {methods.formState.errors?.type?.message}
                    </p>
                </div>

                <Button size="lg" type="submit" disabled={!session}>
                    {!session
                        ? "Sign in to Buy/Sell"
                        : createTransaction.isLoading
                        ? "Loading..."
                        : "Transact"}
                </Button>
                <p className="font-medium text-red-500">
                    {createTransaction.error?.message}
                </p>
            </form>
        </div>
    );
};
